---
interface NavItem {
  label: string;
  href: string;
  isExternal?: boolean;
}

const navItems: NavItem[] = [
  { label: 'Solutions', href: '#solutions' },
  { label: 'Features', href: '#features' },
  { label: 'Benefits', href: '#benefits' },
  { label: 'ROI Calculator', href: '#roi-calculator' },
  { label: 'Integrations', href: '#integrations' },
  { label: 'Login', href: 'https://get.navan.com/vw1oxv5xgmri', isExternal: true },
];
---

<header class="fixed w-full bg-white/95 backdrop-blur-sm z-50 shadow-sm">
  <div class="container mx-auto px-6 py-4">
    <nav class="flex items-center justify-between">
      <a href="/" class="flex items-center hover:opacity-80 transition-opacity">
        <img src="/Navan-Icon.png" alt="Navan Logo" class="h-8 w-auto" />
        <span class="ml-3 text-xl font-bold text-gray-900">Navan</span>
      </a>
      
      <!-- Desktop Navigation -->
      <div class="hidden md:flex items-center space-x-8">
        {navItems.map(item => (
          <a
            href={item.href}
            class="text-gray-600 hover:text-blue-600 transition-colors"
            {...item.isExternal && { target: '_blank', rel: 'noopener noreferrer' }}
          >
            {item.label}
          </a>
        ))}
        <a
          href="https://get.navan.com/vw1oxv5xgmri"
          class="inline-flex items-center justify-center px-4 py-2 bg-blue-600 text-white rounded-lg font-semibold hover:bg-blue-700 transition-all duration-200 transform hover:scale-105"
          target="_blank"
          rel="noopener noreferrer"
        >
          Request Demo
        </a>
      </div>

      <!-- Mobile Menu Button -->
      <button
        id="menuButton"
        class="md:hidden text-gray-600 p-2 rounded-lg hover:bg-gray-100 transition-colors"
        aria-label="Toggle menu"
      >
        <svg id="menuIcon" class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
        <svg id="closeIcon" class="w-6 h-6 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </nav>

    <!-- Mobile Menu -->
    <div id="mobileMenu" class="hidden md:hidden mt-4 pb-4">
      <div class="flex flex-col space-y-4">
        {navItems.map(item => (
          <a
            href={item.href}
            class="text-gray-600 hover:text-blue-600 transition-colors py-2"
            {...item.isExternal && { target: '_blank', rel: 'noopener noreferrer' }}
          >
            {item.label}
          </a>
        ))}
        <a
          href="https://get.navan.com/vw1oxv5xgmri"
          class="inline-flex items-center justify-center px-4 py-2 bg-blue-600 text-white rounded-lg font-semibold hover:bg-blue-700 transition-colors"
          target="_blank"
          rel="noopener noreferrer"
        >
          Request Demo
        </a>
      </div>
    </div>
  </div>
</header>

<script>
  // Toggle mobile menu
  const menuButton = document.getElementById('menuButton');
  const mobileMenu = document.getElementById('mobileMenu');
  const menuIcon = document.getElementById('menuIcon');
  const closeIcon = document.getElementById('closeIcon');
  let isMenuOpen = false;

  function toggleMenu() {
    isMenuOpen = !isMenuOpen;
    mobileMenu?.classList.toggle('hidden');
    menuIcon?.classList.toggle('hidden');
    closeIcon?.classList.toggle('hidden');
  }

  menuButton?.addEventListener('click', toggleMenu);

  // Close mobile menu when clicking outside
  document.addEventListener('click', (e) => {
    if (isMenuOpen && !menuButton?.contains(e.target as Node) && !mobileMenu?.contains(e.target as Node)) {
      toggleMenu();
    }
  });

  // Smooth scrolling for anchor links
  document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', (e) => {
      e.preventDefault();
      const targetId = anchor.getAttribute('href');
      if (!targetId) return;
      
      const targetElement = document.querySelector(targetId);
      if (!targetElement) return;

      // Close mobile menu if open
      if (isMenuOpen) {
        toggleMenu();
      }

      // Calculate header height for offset
      const header = document.querySelector('header');
      const headerHeight = header ? header.offsetHeight : 0;

      // Smooth scroll to target with header offset
      window.scrollTo({
        top: targetElement.getBoundingClientRect().top + window.scrollY - headerHeight - 20,
        behavior: 'smooth'
      });
    });
  });

  // Add active state to nav items based on scroll position
  const sections = document.querySelectorAll('section[id]');
  const navLinks = document.querySelectorAll('a[href^="#"]');

  function updateActiveNavItem() {
    const headerHeight = document.querySelector('header')?.offsetHeight || 0;
    const fromTop = window.scrollY + headerHeight + 100;

    sections.forEach(section => {
      const { top, bottom } = section.getBoundingClientRect();
      const sectionTop = top + window.scrollY;
      const sectionBottom = bottom + window.scrollY;

      if (fromTop >= sectionTop && fromTop <= sectionBottom) {
        const id = section.getAttribute('id');
        navLinks.forEach(link => {
          link.classList.toggle('text-blue-600', link.getAttribute('href') === `#${id}`);
        });
      }
    });
  }

  window.addEventListener('scroll', updateActiveNavItem);
  updateActiveNavItem();
</script>

<style>
  header {
    transition: background-color 0.3s ease, box-shadow 0.3s ease;
  }

  @media (max-width: 768px) {
    #mobileMenu {
      animation: slideDown 0.3s ease-out;
    }
  }

  @keyframes slideDown {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>
